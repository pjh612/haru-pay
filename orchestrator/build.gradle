plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id("com.google.cloud.tools.jib") version "3.4.4"
}

group = 'com.haru'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":common"))
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.1'
    implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.18.2'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    runtimeOnly 'org.apache.logging.log4j:log4j-layout-template-json'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel"){}

jib {
  from {
        image = 'openjdk:17-jdk-slim'
        platforms {
            platform {
                architecture = "arm64"
                os = "linux"
            }
        } // 기본 이미지
    }
    to {
        image = rootProject.name + '-' + project.name + ":" + version
        tags = ['latest']
    }
}

tasks.register('buildDockerImage') {
    dependsOn 'build'
    finalizedBy 'jibDockerBuild'
}